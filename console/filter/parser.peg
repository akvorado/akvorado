{
  // SPDX-FileCopyrightText: 2022 Free Mobile
  // SPDX-License-Identifier: AGPL-3.0-only

  //TODO something in here?

  package filter

  import (
    "fmt"
    "net/netip"

    "akvorado/common/helpers"
  )
}

Input ← _ expr:Expr _ EOF {
  meta := c.globalStore["meta"].(*Meta)
  _, ok := c.state["main-table-only"]
  meta.MainTableRequired = ok
  return expr, nil
}

Expr "expression" ← head:(SubExpr / NotExpr / ConditionExpr) rest:( _ ( KW_AND / KW_OR ) _ Expr )* {
  expr := []string{head.(string)}
  for _, e := range toSlice(rest) {
    rest := toSlice(e)
    expr = append(expr, fmt.Sprintf("%s %s", strings.ToUpper(toString(rest[1])), toString(rest[3])));
  }
  return strings.Join(expr, " "), nil
}
SubExpr "sub-expression" ← '(' _ expr:Expr _ ')' {
  return fmt.Sprintf("(%s)", toString(expr)), nil
}
NotExpr "NOT expression" ← KW_NOT _ expr:Expr {
  return fmt.Sprintf("NOT %s", toString(expr)), nil
}

ConditionExpr "conditional" ←
    ConditionIPExpr
  / ConditionPrefixExpr
  / ConditionStringExpr
  / ConditionBoundaryExpr
  / ConditionSpeedExpr
  / ConditionForwardingStatusExpr
  / ConditionPortExpr
  / ConditionASExpr
  / ConditionASPathExpr
  / ConditionCommunitiesExpr
  / ConditionETypeExpr
  / ConditionProtoExpr
  / ConditionPacketSizeExpr
  / ConditionVlanIDExpr

ColumnIP ←
   "ExporterAddress"i #{ return c.metaColumn("ExporterAddress") } { return c.acceptColumn() }
 / "SrcAddr"i #{ return c.metaColumn("SrcAddr") } { return c.acceptColumn() }
 / "DstAddr"i #{ return c.metaColumn("DstAddr") } { return c.acceptColumn() }
ConditionIPExpr "condition on IP" ←
   column:ColumnIP _
   operator:("=" / "!=") _ ip:IP {
     return fmt.Sprintf("%s %s toIPv6(%s)", toString(column), toString(operator), quote(ip)), nil
   }
 / column:ColumnIP _
   operator:"<<" _ subnet:Subnet {
     return fmt.Sprintf("%s %s", toString(column), subnet), nil
   }
 / column:ColumnIP _
   operator:"!<<" _ subnet:Subnet {
     return fmt.Sprintf("%s NOT %s", toString(column), subnet), nil
   }

ConditionPrefixExpr "condition on prefix" ←
   column:("SrcNetPrefix"i #{ return c.metaColumn("SrcNetPrefix") } { return c.acceptColumn() }
         / "DstNetPrefix"i #{ return c.metaColumn("DstNetPrefix") } { return c.acceptColumn() }) _
   operator:("=" / "!=") _ prefix:Prefix {
     switch toString(operator) {
       case "=": return fmt.Sprintf("%sAddr %s", toString(column)[:3], fmt.Sprintf(toString(prefix), toString(column)[:3])), nil
       case "!=": return fmt.Sprintf("NOT (%sAddr %s)", toString(column)[:3], fmt.Sprintf(toString(prefix), toString(column)[:3])), nil
     }
     return "", nil
   }

ConditionStringExpr "condition on string" ←
 column:("ExporterName"i #{ return c.metaColumn("ExporterName") } { return c.acceptColumn() }
      / "ExporterGroup"i #{ return c.metaColumn("ExporterGroup") } { return c.acceptColumn() }
      / "ExporterRole"i #{ return c.metaColumn("ExporterRole") } { return c.acceptColumn() }
      / "ExporterSite"i #{ return c.metaColumn("ExporterSite") } { return c.acceptColumn() }
      / "ExporterRegion"i #{ return c.metaColumn("ExporterRegion") } { return c.acceptColumn() }
      / "ExporterTenant"i #{ return c.metaColumn("ExporterTenant") } { return c.acceptColumn() }
      / "SrcCountry"i #{ return c.metaColumn("SrcCountry") } { return c.acceptColumn() }
      / "DstCountry"i #{ return c.metaColumn("DstCountry") } { return c.acceptColumn() }
      / "SrcNetName"i #{ return c.metaColumn("SrcNetName") } { return c.acceptColumn() }
      / "DstNetName"i #{ return c.metaColumn("DstNetName") } { return c.acceptColumn() }
      / "SrcNetRole"i #{ return c.metaColumn("SrcNetRole") } { return c.acceptColumn() }
      / "DstNetRole"i #{ return c.metaColumn("DstNetRole") } { return c.acceptColumn() }
      / "SrcNetSite"i #{ return c.metaColumn("SrcNetSite") } { return c.acceptColumn() }
      / "DstNetSite"i #{ return c.metaColumn("DstNetSite") } { return c.acceptColumn() }
      / "SrcNetRegion"i #{ return c.metaColumn("SrcNetRegion") } { return c.acceptColumn() }
      / "DstNetRegion"i #{ return c.metaColumn("DstNetRegion") } { return c.acceptColumn() }
      / "SrcNetTenant"i #{ return c.metaColumn("SrcNetTenant") } { return c.acceptColumn() }
      / "DstNetTenant"i #{ return c.metaColumn("DstNetTenant") } { return c.acceptColumn() }
      / "InIfName"i #{ return c.metaColumn("InIfName") } { return c.acceptColumn() }
      / "OutIfName"i #{ return c.metaColumn("OutIfName") } { return c.acceptColumn() }
      / "InIfDescription"i #{ return c.metaColumn("InIfDescription") } { return c.acceptColumn() }
      / "OutIfDescription"i #{ return c.metaColumn("OutIfDescription") } { return c.acceptColumn() }
      / "InIfConnectivity"i #{ return c.metaColumn("InIfConnectivity") } { return c.acceptColumn() }
      / "OutIfConnectivity"i #{ return c.metaColumn("OutIfConnectivity") } { return c.acceptColumn() }
      / "InIfProvider"i #{ return c.metaColumn("InIfProvider") } { return c.acceptColumn() }
      / "OutIfProvider"i #{ return c.metaColumn("OutIfProvider") } { return c.acceptColumn() }) _
 rcond:RConditionStringExpr {
  return fmt.Sprintf("%s %s", toString(column), toString(rcond)), nil
}
RConditionStringExpr "condition on string" ←
   operator:("=" / "!=" / LikeOperator ) _ str:StringLiteral {
     return fmt.Sprintf("%s %s", toString(operator), quote(str)), nil
   }
 / operator:InOperator _ '(' _ value:ListString _ ')' {
  return fmt.Sprintf("%s (%s)", toString(operator), toString(value)), nil
   }

ConditionBoundaryExpr "condition on boundary" ←
 column:("InIfBoundary"i #{ return c.metaColumn("InIfBoundary") } { return c.acceptColumn() }
      / "OutIfBoundary"i #{ return c.metaColumn("OutIfBoundary") } { return c.acceptColumn() }) _
 operator:("=" / "!=") _
 boundary:("external"i / "internal"i / "undefined"i) {
  return fmt.Sprintf("%s %s %s", toString(column), toString(operator),
                     quote(strings.ToLower(toString(boundary)))), nil
}
ConditionSpeedExpr "condition on speed" ←
 column:("InIfSpeed"i #{ return c.metaColumn("InIfSpeed") } { return c.acceptColumn() }
      / "OutIfSpeed"i #{ return c.metaColumn("OutIfSpeed") } { return c.acceptColumn() }) _
 operator:("=" / ">=" / "<=" / "<" / ">" / "!=") _
 value:Unsigned64 {
  return fmt.Sprintf("%s %s %s", toString(column), toString(operator), toString(value)), nil
}
ConditionForwardingStatusExpr "condition on forwarding status" ←
 column:("ForwardingStatus"i #{ return c.metaColumn("ForwardingStatus") } { return c.acceptColumn() }) _
 operator:("=" / ">=" / "<=" / "<" / ">" / "!=") _
 value:Unsigned8 {
  return fmt.Sprintf("%s %s %s", toString(column), toString(operator), toString(value)), nil
}
ConditionPortExpr "condition on port" ←
 column:("SrcPort"i #{ return c.metaColumn("SrcPort") } { return c.acceptColumn() }
       / "DstPort"i #{ return c.metaColumn("DstPort") } { return c.acceptColumn() }) _
 operator:("=" / ">=" / "<=" / "<" / ">" / "!=") _ value:Unsigned16 {
  return fmt.Sprintf("%s %s %s", toString(column), toString(operator), toString(value)), nil
}

ConditionASExpr "condition on AS number" ←
 column:("SrcAS"i #{ return c.metaColumn("SrcAS") } { return c.acceptColumn() }
       / "DstAS"i #{ return c.metaColumn("DstAS") } { return c.acceptColumn() }
       / "Dst1stAS"i #{ return c.metaColumn("Dst1stAS") } { return c.acceptColumn() }
       / "Dst2ndAS"i #{ return c.metaColumn("Dst2ndAS") } { return c.acceptColumn() }
       / "Dst3rdAS"i #{ return c.metaColumn("Dst3rdAS") } { return c.acceptColumn() }) _
 rcond:RConditionASExpr {
  return fmt.Sprintf("%s %s", toString(column), toString(rcond)), nil
}
RConditionASExpr "condition on AS number" ←
   operator:("=" / "!=") _ value:ASN { return fmt.Sprintf("%s %s", toString(operator), toString(value)), nil }
 / operator:InOperator _ '(' _ value:ListASN _ ')' {
  return fmt.Sprintf("%s (%s)", toString(operator), toString(value)), nil
}

ConditionASPathExpr "condition on AS path" ←
   column:("DstASPath"i #{ return c.metaColumn("DstASPath") } { return c.acceptColumn() }) _ "=" _ value:ASN { return fmt.Sprintf("has(DstASPath, %s)", toString(value)), nil }
 / column:("DstASPath"i #{ return c.metaColumn("DstASPath") } { return c.acceptColumn() }) _ "!=" _ value:ASN { return fmt.Sprintf("NOT has(DstASPath, %s)", toString(value)), nil }

ConditionCommunitiesExpr "condition on communities" ←
   column:("DstCommunities"i #{ return c.metaColumn("DstCommunities") } { return c.acceptColumn() }) _ "=" _ value:Community { return fmt.Sprintf("has(DstCommunities, %s)", toString(value)), nil }
 / column:("DstCommunities"i #{ return c.metaColumn("DstCommunities") } { return c.acceptColumn() }) _ "!=" _ value:Community { return fmt.Sprintf("NOT has(DstCommunities, %s)", toString(value)), nil }
 / column:("DstCommunities"i #{ return c.metaColumn("DstCommunities") } { return c.acceptColumn() }) _ "=" _ value:LargeCommunity { return fmt.Sprintf("has(DstLargeCommunities, %s)", toString(value)), nil }
 / column:("DstCommunities"i #{ return c.metaColumn("DstCommunities") } { return c.acceptColumn() }) _ "!=" _ value:LargeCommunity { return fmt.Sprintf("NOT has(DstLargeCommunities, %s)", toString(value)), nil }

ConditionETypeExpr "condition on Ethernet type" ←
 column:("EType"i #{ return c.metaColumn("EType") } { return c.acceptColumn() }) _
 operator:("=" / "!=") _ value:("IPv4"i / "IPv6"i) {
  etypes := map[string]uint16{
    "ipv4": helpers.ETypeIPv4,
    "ipv6": helpers.ETypeIPv6,
   }
   etype := etypes[strings.ToLower(toString(value))]
   return fmt.Sprintf("%s %s %d", toString(column), toString(operator), etype), nil
}
ConditionProtoExpr "condition on protocol" ← ConditionProtoIntExpr / ConditionProtoStrExpr
ConditionProtoIntExpr "condition on protocol as integer" ←
 column:("Proto"i #{ return c.metaColumn("Proto") } { return c.acceptColumn() }) _
 operator:("=" / ">=" / "<=" / "<" / ">" / "!=") _ value:Unsigned8 {
  return fmt.Sprintf("%s %s %s", toString(column), toString(operator), toString(value)), nil
}
ConditionProtoStrExpr "condition on protocol as string" ←
 column:("Proto"i #{ return c.metaColumn("Proto") } { return c.acceptColumn() }) _
 operator:("=" / "!=") _ value:StringLiteral {
  return fmt.Sprintf("dictGetOrDefault('protocols', 'name', %s, '???') %s %s", toString(column), toString(operator), quote(value)), nil
}
ConditionPacketSizeExpr "condition on packet size" ←
 "PacketSize"i _ operator:("=" / ">=" / "<=" / "<" / ">" / "!=") _ value:Unsigned16 {
  return fmt.Sprintf("Bytes/Packets %s %s", toString(operator), toString(value)), nil
}
ConditionVlanIDExpr "condition on vlan id" ←
 "VlanID"i _ operator:("=" / ">=" / "<=" / "<" / ">" / "!=") _ value:Unsigned16 {
  return fmt.Sprintf("VlanID %s %s", toString(operator), toString(value)), nil
}

IP "IP address" ← [0-9A-Fa-f:.]+ !IdentStart {
  ip, err := netip.ParseAddr(string(c.text))
  if err != nil {
    return false, fmt.Errorf("expecting an IP address")
  }
  return ip.String(), nil
}

Subnet "IP subnet" ← [0-9A-Fa-f:.]+ "/" [0-9]+ !IdentStart {
  net, err := netip.ParsePrefix(string(c.text))
  if err != nil {
    return false, fmt.Errorf("expecting a subnet")
  }
  if net.Addr().Is6() {
    return fmt.Sprintf("BETWEEN toIPv6('%s') AND toIPv6('%s')", net.Masked().Addr().String(), lastIP(net).String()), nil
  }
  return fmt.Sprintf("BETWEEN toIPv6('::ffff:%s') AND toIPv6('::ffff:%s')", net.Masked().Addr().String(), lastIP(net).String()), nil
}

Prefix "IP prefix" ← [0-9A-Fa-f:.]+ "/" [0-9]+ !IdentStart {
  // This returns a string with a %s placeholder
  net, err := netip.ParsePrefix(string(c.text))
  if err != nil {
    return false, fmt.Errorf("expecting a prefix")
  }
  if net.Addr().Is6() {
    return fmt.Sprintf("BETWEEN toIPv6('%s') AND toIPv6('%s') AND %%sNetMask = %d",
      net.Masked().Addr().String(), lastIP(net).String(), net.Bits()), nil
  }
  return fmt.Sprintf("BETWEEN toIPv6('::ffff:%s') AND toIPv6('::ffff:%s') AND %%sNetMask = %d",
    net.Masked().Addr().String(), lastIP(net).String(), net.Bits()), nil
}

ASN "AS number" ← "AS"i? value:Unsigned32 !IdentStart {
  return value, nil
}
ListASN "list of AS numbers" ←
   head:ASN _ ',' _ tail:ListASN { return fmt.Sprintf("%s, %s", toString(head), tail), nil }
 / value:ASN { return toString(value), nil }

Community "community" ← value1:Unsigned16 ":" value2:Unsigned16 !IdentStart !":" {
  return (uint32(value1.(uint16)) << 16) + uint32(value2.(uint16)), nil
}
LargeCommunity "large community" ← value1:Unsigned32 ":" value2:Unsigned32 ":" value3:Unsigned32 !IdentStart !":" {
  return fmt.Sprintf("bitShiftLeft(%d::UInt128, 64) + bitShiftLeft(%d::UInt128, 32) + %d::UInt128", value1, value2, value3), nil
}

StringLiteral "quoted string" ← ( '"' DoubleStringChar* '"' / "'" SingleStringChar* "'" ) {
    return string(c.text[1:len(c.text)-1]), nil
} / ( ( '"' DoubleStringChar* ( EOL / EOF ) ) / ( "'" SingleStringChar* ( EOL / EOF ) ) ) {
    return "", errors.New("string literal not terminated")
}
SourceChar ← .
DoubleStringChar ← !( '"' / EOL ) SourceChar
SingleStringChar ← !( "'" / EOL ) SourceChar
ListString "list of strings" ←
   head:StringLiteral _ ',' _ tail:ListString { return fmt.Sprintf("%s, %s", quote(head), tail), nil }
 / value:StringLiteral { return quote(value), nil }

Unsigned8 "unsigned 8-bit integer" ← [0-9]+ !IdentStart {
  v, err := strconv.ParseUint(string(c.text), 10, 8)
  if err != nil {
    return "", errors.New("expecting an unsigned 8-bit integer")
  }
  return uint8(v), nil
}

Unsigned16 "unsigned 16-bit integer" ← [0-9]+ !IdentStart {
  v, err := strconv.ParseUint(string(c.text), 10, 16)
  if err != nil {
    return "", errors.New("expecting an unsigned 16-bit integer")
  }
  return uint16(v), nil
}

Unsigned32 "unsigned 32-bit integer" ← [0-9]+ !IdentStart {
  v, err := strconv.ParseUint(string(c.text), 10, 32)
  if err != nil {
    return "", errors.New("expecting an unsigned 32-bit integer")
  }
  return uint32(v), nil
}

Unsigned64 "unsigned 64-bit integer" ← [0-9]+ !IdentStart {
  v, err := strconv.ParseUint(string(c.text), 10, 64)
  if err != nil {
    return "", errors.New("expecting an unsigned 64-bit integer")
  }
  return uint64(v), nil
}

LikeOperator "LIKE operators" ←
   KW_LIKE
 / KW_ILIKE
 / KW_UNLIKE
 / KW_IUNLIKE
InOperator "IN operators" ←
   KW_IN
 / KW_NOTIN
KW_AND "AND operator" ← "AND"i !IdentStart { return "AND", nil }
KW_OR "OR operator" ← "OR"i  !IdentStart { return "OR", nil }
KW_NOT "NOT operator" ← "NOT"i !IdentStart { return "NOT", nil }
KW_LIKE "LIKE operator" ← "LIKE"i !IdentStart { return "LIKE", nil }
KW_ILIKE "ILIKE operator" ← "ILIKE"i !IdentStart { return "ILIKE", nil }
KW_IN "IN operator" ← "IN"i !IdentStart { return "IN", nil }
KW_UNLIKE "UNLIKE operator" ← "UNLIKE"i !IdentStart { return "NOT LIKE", nil }
KW_IUNLIKE "IUNLIKE operator" ← "IUNLIKE"i !IdentStart { return "NOT ILIKE", nil }
KW_NOTIN "NOTIN operator" ← "NOTIN"i !IdentStart { return "NOT IN", nil }

SingleLineComment "comment" ← "--" ( !EOL SourceChar )*
MultiLineComment ← "/*" ( !"*/" SourceChar )* ("*/" / EOF {
  return "", errors.New("comment unclosed")
})
IdentStart ← [A-Za-z_]
_ "whitespace" ← ([ \n\r\t] / SingleLineComment / MultiLineComment)*
EOF ← !.
EOL ← '\n'
