---
volumes:
  akvorado-prometheus:
  akvorado-jmx-agent:

services:
  # Store metrics
  prometheus:
    extends:
      file: versions.yml
      service: prometheus
    restart: unless-stopped
    volumes:
      - akvorado-prometheus:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      # Those are the defaults
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      # Those are not the defaults
      - --web.enable-remote-write-receiver
      - --web.external-url=/prometheus
    expose:
      - 9090/tcp
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=PathPrefix(`/prometheus`)
      - traefik.http.routers.prometheus.entrypoints=private
      - metrics.port=9090
      - metrics.path=/prometheus/metrics

  # Fetch metrics
  alloy:
    extends:
      file: docker-compose-alloy.yml
      service: alloy
    volumes:
      - ./alloy/prometheus.alloy:/etc/alloy/prometheus.alloy
    depends_on:
      - prometheus

  # Node exporter for host metrics
  node-exporter:
    extends:
      file: versions.yml
      service: node-exporter
    restart: unless-stopped
    volumes:
      - /:/host:ro,rslave
    network_mode: host
    pid: host
    command:
      - --path.rootfs=/host
    expose:
      - 9100/tcp
    labels:
      - metrics.port=9100

  # cAdvisor for container metrics
  cadvisor:
    extends:
      file: versions.yml
      service: cadvisor
    restart: unless-stopped
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/:/var/lib/docker:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    command:
      # Minimize the amount of metrics reported, notably don't report anything from host
      - --docker_only
      - --store_container_labels=false
      - --disable_root_cgroup_stats
      - --enable_metrics=cpu,cpuLoad,diskIO,memory,network,oom_event,process,tcp,udp
    expose:
      - 8080/tcp
    labels:
      - metrics.port=8080

  # Kafka monitoring
  jmx-exporter-downloader:
    image: alpine:latest
    command: /usr/local/bin/jmx-exporter-download.sh
    volumes:
      - akvorado-jmx-agent:/opt/jmx-exporter
      - ./jmx-exporter-download.sh:/usr/local/bin/jmx-exporter-download.sh
  kafka:
    depends_on:
      jmx-exporter-downloader:
        condition: service_completed_successfully
    environment:
      KAFKA_OPTS: >-
        -javaagent:/opt/jmx-exporter/jmx_prometheus_javaagent.jar=9100:/etc/kafka/jmx-exporter.yaml
    volumes:
      - akvorado-jmx-agent:/opt/jmx-exporter
      - ./kafka-jmx-exporter-config.yaml:/etc/kafka/jmx-exporter.yaml
